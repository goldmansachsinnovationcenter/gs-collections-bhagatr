import "copyright.stg"

skipBooleanKeys() ::= "true"

hasTwoPrimitives() ::= "true"

targetPath() ::= "com/gs/collections/api/map/primitive"

fileName(primitive1, primitive2, sameTwoPrimitives) ::= "Immutable<primitive1.name><primitive2.name>Map"

class(primitive1, primitive2, sameTwoPrimitives) ::= <<
<body(primitive1.type, primitive2.type, primitive1.name, primitive2.name)>
>>

body(type1, type2, name1, name2) ::= <<
<copyright()>

package com.gs.collections.api.map.primitive;

import com.gs.collections.api.<name1>Iterable;
import com.gs.collections.api.block.function.primitive.<name2>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name2>Predicate;
import com.gs.collections.api.block.predicate.primitive.<name1><name2>Predicate;
import com.gs.collections.api.collection.ImmutableCollection;
import com.gs.collections.api.collection.primitive.Immutable<name2>Collection;

/**
 * This file was automatically generated from template file immutablePrimitivePrimitiveMap.stg.
 *
 * @since 3.0.
 */
public interface Immutable<name1><name2>Map extends <name1><name2>Map
{
    Immutable<name1><name2>Map selectPrimitive(<name1><name2>Predicate predicate);

    Immutable<name1><name2>Map rejectPrimitive(<name1><name2>Predicate predicate);

    /**
     * Returns an immutable collection of values that match the given predicate.
     * This method has a different name than the one in <name2>ValuesMap to avoid method clash in Java 21.
     * @since 7.0.4
     */
    Immutable<name2>Collection select(<name2>Predicate predicate);

    /**
     * Returns an immutable collection of values that do not match the given predicate.
     * This method has a different name than the one in <name2>ValuesMap to avoid method clash in Java 21.
     * @since 7.0.4
     */
    Immutable<name2>Collection reject(<name2>Predicate predicate);

    /**
     * Returns an immutable collection of transformed values.
     * This method has a different name than the one in <name2>ValuesMap to avoid method clash in Java 21.
     * @since 7.0.4
     */
    \<V> ImmutableCollection\<V> collect(<name2>ToObjectFunction\<? extends V> function);

    Immutable<name1><name2>Map newWithKeyValue(<type1> key, <type2> value);

    Immutable<name1><name2>Map newWithoutKey(<type1> key);

    Immutable<name1><name2>Map newWithoutAllKeys(<name1>Iterable keys);
}

>>
