import "copyright.stg"
import "primitiveAPI.stg"

targetPath() ::= "com/gs/collections/api/bag/primitive"

fileName(primitive) ::= "<primitive.name>Bag"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.api.bag.primitive;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.api.bag.Bag;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name>IntProcedure;

/**
 * This file was automatically generated from template file primitiveBag.stg.
 *
 * @since 3.0.
 */
public interface <name>Bag extends <name>Iterable
{
    /**
     * The size of the Bag when counting only distinct elements.
     */
    int sizeDistinct();

    /**
     * The occurrences of a distinct item in the bag.
     */
    int occurrencesOf(<type> item);

    /**
     * For each distinct item, with the number of occurrences, execute the specified procedure.
     */
    void forEachWithOccurrences(<name>IntProcedure procedure);

    <sharedAPI(fileName(primitive), name)>

    /**
     * Returns a bag of transformed values.
     * This method has a different name than the one in Mutable<name>Bag to avoid method clash in Java 21.
     * @since 7.0.4
     */
    \<V> Bag\<V> collectToBag(<name>ToObjectFunction\<? extends V> function);
    
    /**
     * @deprecated As of 7.0.4, use {@link #collectToBag(<name>ToObjectFunction)} instead.
     */
    @Deprecated
    default \<V> Bag\<V> collect(<name>ToObjectFunction\<? extends V> function)
    {
        return this.collectToBag(function);
    }

    /**
     * Follows the same general contract as {@link Bag#equals(Object)}.
     */
    @Override
    boolean equals(Object o);

    /**
     * Follows the same general contract as {@link Bag#hashCode()}.
     */
    @Override
    int hashCode();

    /**
     * Returns an immutable copy of this bag. If the bag is immutable, it returns itself.
     */
    Immutable<name>Bag toImmutable();
}

>>
