import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

targetPath() ::= "com/gs/collections/api/map/primitive"

fileName(primitive) ::= "<primitive.name>ValuesMap"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.api.map.primitive;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.collection.MutableCollection;
import com.gs.collections.api.collection.primitive.Mutable<name>Collection;

/**
 * This file was automatically generated from template file primitiveValuesMap.stg.
 *
 * @since 6.0.
 */
public interface <name>ValuesMap extends <name>Iterable
{
    boolean containsValue(<type> value);

    void forEachValue(<name>Procedure procedure);
    
    <name>Collection selectValues(<name>Predicate predicate);
    
    <name>Collection rejectValues(<name>Predicate predicate);
    
    \<V> MutableCollection\<V> collectValues(<name>ToObjectFunction\<? extends V> function);
    
    Mutable<name>Collection selectPrimitive(<name>Predicate predicate);
    
    Mutable<name>Collection rejectPrimitive(<name>Predicate predicate);
    
    \<V> MutableCollection\<V> collectObject(<name>ToObjectFunction\<? extends V> function);

    Mutable<name>Collection values();
}

>>
