import "copyright.stg"
import "primitiveAPI.stg"

targetPath() ::= "com/gs/collections/api/bag/primitive"

fileName(primitive) ::= "Mutable<primitive.name>Bag"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.api.bag.primitive;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.api.bag.MutableBag;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.collection.primitive.Mutable<name>Collection;

/**
 * This file was automatically generated from template file mutablePrimitiveBag.stg.
 *
 * @since 3.0.
 */
public interface Mutable<name>Bag extends Mutable<name>Collection, <name>Bag
{
    void addOccurrences(<type> item, int occurrences);

    boolean removeOccurrences(<type> item, int occurrences);

    <sharedAPI(fileName(primitive), name)>

    /**
     * Returns a mutable bag of transformed values.
     * This method has a different name than the one in <name>Bag to avoid method clash in Java 21.
     * @since 7.0.4
     */
    \<V> MutableBag\<V> collectToMutableBag(<name>ToObjectFunction\<? extends V> function);
    
    /**
     * @deprecated As of 7.0.4, use {@link #collectToMutableBag(<name>ToObjectFunction)} instead.
     */
    @Deprecated
    default \<V> MutableBag\<V> collect(<name>ToObjectFunction\<? extends V> function)
    {
        return this.collectToMutableBag(function);
    }

    <mutableAPI(fileName(primitive), type, name)>

    Mutable<name>Bag asUnmodifiable();

    Mutable<name>Bag asSynchronized();

    /**
     * Returns an immutable copy of this bag.
     */
    Immutable<name>Bag toImmutable();
}

>>
