import "copyright.stg"

targetPath() ::= "com/gs/collections/api/map/primitive"

fileName(primitive) ::= "ImmutableObject<primitive.name>Map"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.api.map.primitive;

import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.Object<name>Predicate;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.collection.ImmutableCollection;
import com.gs.collections.api.collection.primitive.Immutable<name>Collection;

/**
 * This file was automatically generated from template file immutableObjectPrimitiveMap.stg.
 *
 * @since 3.0.
 */
public interface ImmutableObject<name>Map\<K> extends Object<name>Map\<K>
{
    ImmutableObject<name>Map\<K> selectImmutable(Object<name>Predicate\<? super K> predicate);

    ImmutableObject<name>Map\<K> rejectImmutable(Object<name>Predicate\<? super K> predicate);

    Immutable<name>Collection selectImmutable(<name>Predicate predicate);

    Immutable<name>Collection rejectImmutable(<name>Predicate predicate);

    \<V> ImmutableCollection\<V> collectImmutable(<name>ToObjectFunction\<? extends V> function);

    ImmutableObject<name>Map\<K> newWithKeyValue(K key, <type> value);

    ImmutableObject<name>Map\<K> newWithoutKey(K key);

    ImmutableObject<name>Map\<K> newWithoutAllKeys(Iterable\<? extends K> keys);
}

>>
